r4%@&89
r4%@&89

https://software.intel.com/en-us/xdk/docs/using-web-services
https://github.com/mashery/iodocs

apiconfig
		{
		  "classified": {
		    "name": "Lower Case API",
		    "description": "A great API",
		    "dashboardUrl": "http://developer.example.api",
		    "auth": "key",
		    "requiredLibraries": [
		      "http://example.api/example-api.js"
		    ],
		    "compatibleProjectTypes": [
		      "com.intel.xdk.projecttype.jsapp",
		      "com.intel.xdk.projecttype.webapp",
		      "com.intel.xdk.projecttype.iotapp"
		    ],
		    "signature": "apiSecret"
		  }
		}

		{
		  "classified": {
		    "name": "Lower Case API",
		    "description": "A great API for see ads",
		    "dashboardUrl": "http://localhost:8080/classified",
		    "auth": "key",
		    "requiredLibraries": [
		      "http://example.api/example-api.js"
		    ],
		    "compatibleProjectTypes": [
		      "com.intel.xdk.projecttype.jsapp",
		      "com.intel.xdk.projecttype.webapp",
		      "com.intel.xdk.projecttype.iotapp"
		    ],
		    "signature": "apiSecret"
		  }
		}


classified.json

	{
	  "endpoints": [
	    {
	      "name": "Resource Ads",
	      "dashboardUrl": "http://localhost:8080/classified/resources/anuncios",
	      "methods": [
		{
		  "MethodName": "findAllAnuncios",
		  "Synopsis": "List all ads."
		},
		{
		  "MethodName": "methodA1User",
		  "Synopsis": "Grabs information from the A1 data set for a specific user",
		  "parameters": [
		    {
		      "Name": "param_1_name",
		      "Required": "Y",
		      "Default": "",
		      "Type": "string",
		      "Description": "Description of the first parameter."
		    },
		    {
		      "Name": "userId",
		      "Required": "Y",
		      "Default": "",
		      "Type": "string",
		      "Description": "The userId parameter that is in the URI."
		    }
		  ]
		},
		{
		  "MethodName": "methodA1Authenticate",
		  "Synopsis": "This is a bare-boned implementation of basic OAuth 2 authentication.  We suggest you hook this method up to your login button. Depending on the service, other parameters may be necessary.",
		  "parameters": [
		    {
		      "Name": "response_type",
		      "Required": "Y",
		      "Default": "code",
		      "Type": "string",
		      "Description": "<pre>code</pre> for authentication code, <pre>token</pre> for implicit"
		    },
		    {
		      "Name": "redirect_uri",
		      "Required": "Y",
		      "Default": "OAUTH_CALLBACK",
		      "Type": "string",
		      "Description": "The redirect_uri must match the redirect uri in your app settings on the API website. You must use the localhost/127.0.0.1 url provided for the services tab or else your service won't work, but you are free to use whatever url you want after that."
		    }
		  ]
		},
		{
		  "MethodName": "authenticatedMethodA1",
		  "Synopsis": "A function call that requires an access token acquired from first authenticating the service",
		  "parameters": [
		    {
		      "Name": "param_1_name",
		      "Required": "Y",
		      "Default": "",
		      "Type": "string",
		      "Description": "Description of the first parameter."
		    }
		  ]
		}
	      ]
	    }
	  ]
	}

	{
	  "classified": {
	    "name": "classified",
	    "description": "classified for condominum",
	    "dashboardUrl": "http://localhost:8080/classified",
	    "auth": "key",
	    "requiredLibraries": [      
	    ],
	    "compatibleProjectTypes": [
	      "com.intel.xdk.projecttype.jsapp",
	      "com.intel.xdk.projecttype.webapp",
	      "com.intel.xdk.projecttype.iotapp"
	    ],
	    "signature": "apiSecret"
	  }
	}


classified.js

/*globals window, console, $*/
/*jshint -W068 */
(function (credentials, helpers) {
  var exports = {};

  /* Data Feed Function */
  exports.methodA1 = function (params) {
    var url = 'http://example.api/methodA1?api_key_var_name=' + credentials.apiKey;
    return $.ajax({url: url});
  };

  exports.methodA1User = function(params) {
    var url = 'http://example.api/methodA1/user/' + params.UserId;
    delete params.UserId;
    if (params) url = url + '?' + $.param(params);
    return $.ajax({url: url, type: 'GET'});
  };

  /* OAuth Functions */
  exports.methodA1Authenticate = function(params) {
    // var implicitUrl = 'https://www.exampleurl.com/auth?';
    var url = {
      codeUrl: 'https://www.exampleurl.com/auth?',
      tokenUrl: 'https://www.exampleurl.com/access_token?'
    };

    //parameters will vary from service to service
    /* var = implicitParams {
      client_id: credentials.apiKey,
      redirect_uri: params.redirect_uri,
      response_type: params.response_type
    } */
    var urlParams = {
      code: {
        client_id: credentials.apiKey,
        redirect_uri: params.redirect_uri,
        response_type: params.response_type
      },
      token: {
        client_secret: credentials.apiSecret,
        grant_type: 'authorization_code'
      }
    };

    //helper oauth functions return access token. check to see if service uses authentication code or implicit oauth
    //return helpers.oauth2Implicit(implicitUrl, implicitParams)
    return helpers.oauth2AuthCode(url, urlParams)
    .then(function(token){
      var db = window.localStorage;
      //'service_access_token' should be unique to each service so that multiple authenticated services can be used
      db.setItem('service_access_token', token);
      return token;
    })
    .fail(function(err){
      console.log(err);
    });
  };

  exports.authenticatedMethodA1 = function(params){
    var token = window.localStorage.getItem('service_access_token');
    if (!token) return 'Need access token before making call';

    var urlParams = $.extend({access_token: token}, params);
    var completeUrl = 'https://api.example.com/call?' +  $.param(urlParams);
    return $.ajax({
      url: completeUrl,
      type: 'GET',
      dataType: 'json'
    })
    .then(function(response){
      return response;
    })
    .fail(function(err){
      return err.responseText;
    });
  };

  return exports;
});// jshint ignore:line




